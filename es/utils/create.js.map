{"version":3,"sources":["utils/create.js"],"names":["THREE","initialCube","size","x","y","z","initialColor","Math","random","createCube","color","geometry","BoxBufferGeometry","mesh","Mesh","MeshLambertMaterial","position","set","createLink","props","startPosition","endPosition","linewidth","Geometry","material","LineBasicMaterial","vertices","push","Vector3","line","Line","createCylinder","radiusTop","radiusBottom","height","radialSegments","basePosition","CylinderGeometry","cylinder","loader","TextureLoader","groundTexture","load","require","createCylinderMesh","startWidth","endWidth","vectorStartPoint","vectorEndPoint","direction","subVectors","arrowDirection","clone","arrow","ArrowHelper","normalize","edgeGeometry","length","groundMaterial","map","edge","rotation","copy","addVectors","multiplyScalar","createTube","segments","radius","radiusSegments","closed","startPoint","endPoint","centerPoint","TubeGeometry","CatmullRomCurve3","font","fontLoader","FontLoader","initFont","callBack","response","createFont","option","text","TextGeometry","curveSegments","bevelThickness","bevelSize","bevelEnabled","textMaterial","MeshPhongMaterial","specular"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nexport const initialCube = {\n    size: { x: 10, y: 10, z: 10 },\n};\nexport const initialColor = Math.random() * 0xffffff;\n/** 创建立方体 */\nexport const createCube = ({ size, color } = initialCube) => {\n    const { x, y, z } = size;\n    const geometry = new THREE.BoxBufferGeometry(x, y, z);\n    const mesh = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial({ color: color || initialColor }));\n    mesh.position.set(0, 0, 0);\n    return mesh;\n};\n/** 创建连线 */\nexport const createLink = (props) => {\n    const { startPosition, endPosition, color = initialColor, linewidth = 1 } = props;\n    const geometry = new THREE.Geometry();\n    const material = new THREE.LineBasicMaterial({ color, linewidth });\n    // 线的材质可以由2点的颜色决定\n    geometry.vertices.push(new THREE.Vector3(startPosition.x, startPosition.y, startPosition.z));\n    geometry.vertices.push(new THREE.Vector3(endPosition.x, endPosition.y, endPosition.z));\n    const line = new THREE.Line(geometry, material);\n    return line;\n};\n/** 创建锥体 */\nexport const createCylinder = (props) => {\n    const { radiusTop, radiusBottom, height, radialSegments, color = initialColor, basePosition } = props;\n    const geometry = new THREE.CylinderGeometry(radiusTop, radiusBottom, height, radialSegments);\n    const material = new THREE.MeshLambertMaterial({ color });\n    const cylinder = new THREE.Mesh(geometry, material);\n    cylinder.position.set(basePosition.x, height / 2, basePosition.z);\n    return cylinder;\n};\nconst loader = new THREE.TextureLoader();\nconst groundTexture = loader.load(require('../assets/tree.jpg'));\nexport const createCylinderMesh = function (props) {\n    const { startPosition, endPosition, startWidth = 0.2, endWidth = 0.6 } = props;\n    const vectorStartPoint = new THREE.Vector3(startPosition.x, startPosition.y, startPosition.z);\n    const vectorEndPoint = new THREE.Vector3(endPosition.x, endPosition.y, endPosition.z);\n    const direction = new THREE.Vector3().subVectors(vectorEndPoint, vectorStartPoint);\n    const arrowDirection = direction.clone();\n    const arrow = new THREE.ArrowHelper(arrowDirection.normalize(), vectorStartPoint);\n    const edgeGeometry = new THREE.CylinderGeometry(startWidth, endWidth, direction.length(), 6, 4);\n    // 添加树的纹理\n    const groundMaterial = new THREE.MeshLambertMaterial({ map: groundTexture });\n    const edge = new THREE.Mesh(edgeGeometry, groundMaterial);\n    edge.rotation.copy(arrow.rotation);\n    const position = new THREE.Vector3().addVectors(vectorStartPoint, direction.multiplyScalar(0.5));\n    edge.position.set(position.x, position.y, position.z);\n    return edge;\n};\nexport const createTube = (props) => {\n    const { startPosition, endPosition, segments = 20, radius, radiusSegments = 10, closed = false } = props;\n    const startPoint = new THREE.Vector3(startPosition.x, startPosition.y, startPosition.z);\n    const endPoint = new THREE.Vector3(endPosition.x, endPosition.y, endPosition.z);\n    // 创建中心偏移节点 生成曲线\n    const centerPoint = new THREE.Vector3(startPosition.x + (endPosition.x - startPosition.x) / 2 + 0.5, startPosition.y + (endPosition.y - startPosition.y) / 2 - 0.3, startPosition.z + (endPosition.z - startPosition.z) / 2 + 0.5);\n    const geometry = new THREE.TubeGeometry(new THREE.CatmullRomCurve3([startPoint, centerPoint, endPoint]), segments, radius, radiusSegments, closed);\n    // 添加树的纹理\n    const groundMaterial = new THREE.MeshLambertMaterial({ map: groundTexture });\n    const mesh = new THREE.Mesh(geometry, groundMaterial);\n    return mesh;\n};\nlet font = null;\nconst fontLoader = new THREE.FontLoader();\nexport const initFont = (callBack) => {\n    if (font) {\n        callBack(font);\n    }\n    else {\n        // const font = fontLoader.parse(require('../assets/gl/font/PingFang_SC_Regular.json'));\n        // callBack(font);\n        fontLoader.load('https://raw.githubusercontent.com/aisriver/gl-datatree/master/src/assets/gl/font/PingFang_SC_Regular.json', response => {\n            font = response;\n            callBack(font);\n        });\n    }\n};\nexport const createFont = (option, callBack) => {\n    const { text, size = 3, height = 0.1, color = 0xff0000 } = option;\n    initFont(font => {\n        const geometry = new THREE.TextGeometry(text, {\n            font,\n            size,\n            height,\n            curveSegments: 6,\n            bevelThickness: 1,\n            bevelSize: 1,\n            bevelEnabled: false,\n        });\n        const textMaterial = new THREE.MeshPhongMaterial({ color, specular: 0xffffff });\n        const mesh = new THREE.Mesh(geometry, textMaterial);\n        if (callBack && typeof callBack === 'function') {\n            callBack(mesh);\n        }\n    });\n};\n"],"file":"create.js"}