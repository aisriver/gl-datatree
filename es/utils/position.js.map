{"version":3,"sources":["utils/position.js"],"names":["THREE","getAbsZ","r","x","Math","sqrt","getOffsetPosition","props","startPosition","length","rate","maxNumber","index","sameHeight","rl","vl","tan","PI","sin","cos","p1","y","relativeRate","relativeX","relativeZ","z","getUnitVectorPosition","endPosition","l","n","getStraightPosition","m","getNodePosition","level","branchLength","nodeNum","changeCenterPoint","obj","wrapper","Object3D","position","set","add","toWindowPosition","camera","domInfo","mesh","Mesh","vector","localToWorld","Vector3","project","widthHalf","width","heightHalf","height"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUC,IAAI,CAACC,IAAL,CAAUH,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAtB,CAAV;AAAA,CAAhB;AACP;;AACA,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AAAA,MAChCC,aADgC,GACqCD,KADrC,CAChCC,aADgC;AAAA,MACjBC,MADiB,GACqCF,KADrC,CACjBE,MADiB;AAAA,MACTC,IADS,GACqCH,KADrC,CACTG,IADS;AAAA,MACHC,SADG,GACqCJ,KADrC,CACHI,SADG;AAAA,MACQC,KADR,GACqCL,KADrC,CACQK,KADR;AAAA,0BACqCL,KADrC,CACeM,UADf;AAAA,MACeA,UADf,kCAC4B,IAD5B;AAExC,MAAIC,EAAJ;AACA,MAAIC,EAAJ,CAHwC,CAIxC;;AACA,MAAIF,UAAJ,EAAgB;AACZE,IAAAA,EAAE,GAAGN,MAAL;AACAK,IAAAA,EAAE,GAAGV,IAAI,CAACY,GAAL,CAAW,IAAIZ,IAAI,CAACa,EAAV,GAAgB,GAAjB,GAAwBP,IAAjC,IAAyCK,EAA9C;AACH,GAHD,MAIK;AACD;AACAD,IAAAA,EAAE,GAAGV,IAAI,CAACc,GAAL,CAAW,IAAId,IAAI,CAACa,EAAV,GAAgB,GAAjB,GAAwBP,IAAjC,IAAyCD,MAA9C;AACAM,IAAAA,EAAE,GAAGX,IAAI,CAACe,GAAL,CAAW,IAAIf,IAAI,CAACa,EAAV,GAAgB,GAAjB,GAAwBP,IAAjC,IAAyCD,MAA9C;AACH;;AACD,MAAMW,EAAE,mCAAQZ,aAAR;AAAuBa,IAAAA,CAAC,EAAEb,aAAa,CAACa,CAAd,GAAkBN;AAA5C,IAAR;;AACA,MAAMO,YAAY,GAAI,MAAMX,SAAP,GAAoBC,KAAzC;AACA,MAAIW,SAAJ;AACA,MAAIC,SAAJ;;AACA,MAAIF,YAAY,IAAI,CAAhB,IAAqBA,YAAY,IAAI,GAAzC,EAA8C;AAC1CC,IAAAA,SAAS,GAAGT,EAAE,GAAIQ,YAAY,GAAGR,EAAhB,GAAsB,EAAvC;AACAU,IAAAA,SAAS,GAAGvB,OAAO,CAACa,EAAD,EAAKS,SAAL,CAAnB;AACH;;AACD,MAAID,YAAY,GAAG,GAAf,IAAsBA,YAAY,IAAI,GAA1C,EAA+C;AAC3CC,IAAAA,SAAS,GAAID,YAAY,GAAGR,EAAhB,GAAsB,EAAtB,GAA2B,IAAIA,EAA3C;AACAU,IAAAA,SAAS,GAAG,CAACvB,OAAO,CAACa,EAAD,EAAKS,SAAL,CAApB;AACH;;AACD,yCACOH,EADP;AAEIjB,IAAAA,CAAC,EAAEiB,EAAE,CAACjB,CAAH,GAAOoB,SAFd;AAGIE,IAAAA,CAAC,EAAEL,EAAE,CAACK,CAAH,GAAOD;AAHd;AAKH,CA/BM;AAgCP;;AACA,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAClB,aAAD,EAAgBmB,WAAhB,EAAgC;AACjE;AACA,MAAMC,CAAC,GAAG;AACNzB,IAAAA,CAAC,EAAEwB,WAAW,CAACxB,CAAZ,GAAgBK,aAAa,CAACL,CAD3B;AAENkB,IAAAA,CAAC,EAAEM,WAAW,CAACN,CAAZ,GAAgBb,aAAa,CAACa,CAF3B;AAGNI,IAAAA,CAAC,EAAEE,WAAW,CAACF,CAAZ,GAAgBjB,aAAa,CAACiB;AAH3B,GAAV,CAFiE,CAOjE;;AACA,MAAMI,CAAC,GAAGzB,IAAI,CAACC,IAAL,CAAUuB,CAAC,CAACzB,CAAF,GAAMyB,CAAC,CAACzB,CAAR,GAAYyB,CAAC,CAACP,CAAF,GAAMO,CAAC,CAACP,CAApB,GAAwBO,CAAC,CAACH,CAAF,GAAMG,CAAC,CAACH,CAA1C,CAAV;AACA,SAAO;AACHtB,IAAAA,CAAC,EAAEyB,CAAC,CAACzB,CAAF,GAAM0B,CADN;AAEHR,IAAAA,CAAC,EAAEO,CAAC,CAACP,CAAF,GAAMQ,CAFN;AAGHJ,IAAAA,CAAC,EAAEG,CAAC,CAACH,CAAF,GAAMI;AAHN,GAAP;AAKH,CAdM;AAeP;;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACtB,aAAD,EAAgBmB,WAAhB,EAA6BlB,MAA7B,EAAwC;AACvE,MAAMsB,CAAC,GAAGL,qBAAqB,CAAClB,aAAD,EAAgBmB,WAAhB,CAA/B,CADuE,CAEvE;;AACA,SAAO;AACHxB,IAAAA,CAAC,EAAE4B,CAAC,CAAC5B,CAAF,GAAMM,MAAN,GAAekB,WAAW,CAACxB,CAD3B;AAEHkB,IAAAA,CAAC,EAAEU,CAAC,CAACV,CAAF,GAAMZ,MAAN,GAAekB,WAAW,CAACN,CAF3B;AAGHI,IAAAA,CAAC,EAAEM,CAAC,CAACN,CAAF,GAAMhB,MAAN,GAAekB,WAAW,CAACF;AAH3B,GAAP;AAKH,CARM;AASP;;AACA,OAAO,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACzB,KAAD,EAAW;AAAA,MAC9B0B,KAD8B,GACsC1B,KADtC,CAC9B0B,KAD8B;AAAA,MACvBrB,KADuB,GACsCL,KADtC,CACvBK,KADuB;AAAA,MAChBJ,aADgB,GACsCD,KADtC,CAChBC,aADgB;AAAA,MACDmB,WADC,GACsCpB,KADtC,CACDoB,WADC;AAAA,MACYO,YADZ,GACsC3B,KADtC,CACY2B,YADZ;AAAA,MAC0BC,OAD1B,GACsC5B,KADtC,CAC0B4B,OAD1B,EAEtC;;AACA,MAAIzB,IAAI,GAAGyB,OAAO,GAAG,EAAV,GAAe,EAA1B;;AACA,MAAIzB,IAAI,GAAG,EAAX,EAAe;AACXA,IAAAA,IAAI,GAAG,EAAP;AACH;;AACD,MAAIA,IAAI,GAAG,EAAX,EAAe;AACXA,IAAAA,IAAI,GAAG,EAAP;AACH;;AACD,MAAIyB,OAAO,KAAK,CAAhB,EAAmB;AACfzB,IAAAA,IAAI,GAAG,CAAP;AACH;;AACD,SAAOJ,iBAAiB,CAAC;AACrBE,IAAAA,aAAa,EAAEyB,KAAK,KAAK,CAAV,GAAczB,aAAd,GAA8BmB,WADxB;AAErBlB,IAAAA,MAAM,EAAEyB,YAFa;AAGrBxB,IAAAA,IAAI,EAAJA,IAHqB;AAIrBC,IAAAA,SAAS,EAAEwB,OAJU;AAKrBvB,IAAAA,KAAK,EAALA;AALqB,GAAD,CAAxB;AAOH,CApBM;AAqBP;;AACA,OAAO,IAAMwB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACjC,CAAD,EAAIkB,CAAJ,EAAOI,CAAP,EAAUY,GAAV,EAAkB;AAC/C,MAAMC,OAAO,GAAG,IAAItC,KAAK,CAACuC,QAAV,EAAhB;AACAD,EAAAA,OAAO,CAACE,QAAR,CAAiBC,GAAjB,CAAqBtC,CAArB,EAAwBkB,CAAxB,EAA2BI,CAA3B;AACAa,EAAAA,OAAO,CAACI,GAAR,CAAYL,GAAZ;AACAA,EAAAA,GAAG,CAACG,QAAJ,CAAaC,GAAb,CAAiB,CAACtC,CAAlB,EAAqB,CAACkB,CAAtB,EAAyB,CAACI,CAA1B;AACA,SAAOa,OAAP;AACH,CANM;AAOP;;AACA,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACpC,KAAD,EAAW;AAAA,MAC/B8B,GAD+B,GACN9B,KADM,CAC/B8B,GAD+B;AAAA,MAC1BO,MAD0B,GACNrC,KADM,CAC1BqC,MAD0B;AAAA,MAClBC,OADkB,GACNtC,KADM,CAClBsC,OADkB;AAAA,MAE/BL,QAF+B,GAElBH,GAFkB,CAE/BG,QAF+B;AAGvC,MAAMM,IAAI,GAAG,IAAI9C,KAAK,CAAC+C,IAAV,EAAb;AACA,MAAMC,MAAM,GAAGF,IAAI,CAACG,YAAL,CAAkB,IAAIjD,KAAK,CAACkD,OAAV,CAAkBV,QAAQ,CAACrC,CAA3B,EAA8BqC,QAAQ,CAACnB,CAAvC,EAA0CmB,QAAQ,CAACf,CAAnD,CAAlB,EAAyE0B,OAAzE,CAAiFP,MAAjF,CAAf;AACA,MAAMQ,SAAS,GAAGP,OAAO,CAACQ,KAAR,GAAgB,CAAlC;AACA,MAAMC,UAAU,GAAGT,OAAO,CAACU,MAAR,GAAiB,CAApC;AACAP,EAAAA,MAAM,CAAC7C,CAAP,GAAW6C,MAAM,CAAC7C,CAAP,GAAWiD,SAAX,GAAuBA,SAAlC;AACAJ,EAAAA,MAAM,CAAC3B,CAAP,GAAW,EAAE2B,MAAM,CAAC3B,CAAP,GAAWiC,UAAb,IAA2BA,UAAtC;AACA,SAAO;AACHnD,IAAAA,CAAC,EAAE6C,MAAM,CAAC7C,CAAP,GAAW0C,OAAO,CAAC1C,CADnB;AAEHkB,IAAAA,CAAC,EAAE2B,MAAM,CAAC3B,CAAP,GAAWwB,OAAO,CAACxB;AAFnB,GAAP;AAIH,CAbM","sourcesContent":["import * as THREE from 'three';\n/** 获取圆中另一个坐标的绝对值 */\nexport const getAbsZ = (r, x) => Math.sqrt(r * r - x * x);\n/** 获取分布的偏移坐标 */\nexport const getOffsetPosition = (props) => {\n    const { startPosition, length, rate, maxNumber, index, sameHeight = true } = props;\n    let rl;\n    let vl;\n    // 统一分支高度\n    if (sameHeight) {\n        vl = length;\n        rl = Math.tan(((2 * Math.PI) / 360) * rate) * vl;\n    }\n    else {\n        // 统一分支长度\n        rl = Math.sin(((2 * Math.PI) / 360) * rate) * length;\n        vl = Math.cos(((2 * Math.PI) / 360) * rate) * length;\n    }\n    const p1 = { ...startPosition, y: startPosition.y + vl };\n    const relativeRate = (360 / maxNumber) * index;\n    let relativeX;\n    let relativeZ;\n    if (relativeRate >= 0 && relativeRate <= 180) {\n        relativeX = rl - (relativeRate * rl) / 90;\n        relativeZ = getAbsZ(rl, relativeX);\n    }\n    if (relativeRate > 180 && relativeRate <= 360) {\n        relativeX = (relativeRate * rl) / 90 - 3 * rl;\n        relativeZ = -getAbsZ(rl, relativeX);\n    }\n    return {\n        ...p1,\n        x: p1.x + relativeX,\n        z: p1.z + relativeZ,\n    };\n};\n/** 获取单位向量坐标 */\nexport const getUnitVectorPosition = (startPosition, endPosition) => {\n    // 向量\n    const l = {\n        x: endPosition.x - startPosition.x,\n        y: endPosition.y - startPosition.y,\n        z: endPosition.z - startPosition.z,\n    };\n    // 单位向量\n    const n = Math.sqrt(l.x * l.x + l.y * l.y + l.z * l.z);\n    return {\n        x: l.x / n,\n        y: l.y / n,\n        z: l.z / n,\n    };\n};\n/** 获取任意方向的直行坐标 */\nexport const getStraightPosition = (startPosition, endPosition, length) => {\n    const m = getUnitVectorPosition(startPosition, endPosition);\n    // 直行坐标\n    return {\n        x: m.x * length + endPosition.x,\n        y: m.y * length + endPosition.y,\n        z: m.z * length + endPosition.z,\n    };\n};\n/** 获取当前节点的位置 */\nexport const getNodePosition = (props) => {\n    const { level, index, startPosition, endPosition, branchLength, nodeNum } = props;\n    // 分支越多角度越大\n    let rate = nodeNum * 10 - 10;\n    if (rate > 90) {\n        rate = 90;\n    }\n    if (rate < 15) {\n        rate = 15;\n    }\n    if (nodeNum === 1) {\n        rate = 0;\n    }\n    return getOffsetPosition({\n        startPosition: level === 2 ? startPosition : endPosition,\n        length: branchLength,\n        rate,\n        maxNumber: nodeNum,\n        index,\n    });\n};\n/** 更改对象中心点 */\nexport const changeCenterPoint = (x, y, z, obj) => {\n    const wrapper = new THREE.Object3D();\n    wrapper.position.set(x, y, z);\n    wrapper.add(obj);\n    obj.position.set(-x, -y, -z);\n    return wrapper;\n};\n/** 从webgl坐标反向映射出屏幕坐标 */\nexport const toWindowPosition = (props) => {\n    const { obj, camera, domInfo } = props;\n    const { position } = obj;\n    const mesh = new THREE.Mesh();\n    const vector = mesh.localToWorld(new THREE.Vector3(position.x, position.y, position.z)).project(camera);\n    const widthHalf = domInfo.width / 2;\n    const heightHalf = domInfo.height / 2;\n    vector.x = vector.x * widthHalf + widthHalf;\n    vector.y = -(vector.y * heightHalf) + heightHalf;\n    return {\n        x: vector.x + domInfo.x,\n        y: vector.y + domInfo.y,\n    };\n};\n"],"file":"position.js"}