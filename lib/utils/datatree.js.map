{"version":3,"sources":["utils/datatree.js"],"names":["initialDataTree","position","x","y","z","data","leafs","leafLoader","GLTFLoader","dataIds","gridBox","getBranchLength","treeHeight","level","maxLength","minLength","currentLength","renderTree","props","group","startPosition","endPosition","baseNodeSize","isFirstNode","filter","item","length","push","positionY","branchLength","nodeNum","forEach","index","children","restParams","id","pid","nodeRate","nodeSize","nodeCubeConfig","size","color","node","scene","clone","scale","set","nodePosition","castShadow","receiveShadow","name","userData","type","linkStartPosition","linkMeshConfig","startWidth","endWidth","link","linkName","label","from","to","add","currentEndPosition","createDataTree","callBack","title","THREE","Group","baseNodeWidth","baseNodeHeight","titleLength","startNode","load","require","gltf","trunk","fontSize","text","result","ids"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;AACA,IAAMA,eAAe,GAAG;AACpBC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE,CAAX;AAAcC,IAAAA,CAAC,EAAE;AAAjB,GADU;AAEpBC,EAAAA,IAAI,EAAE;AAFc,CAAxB;AAIA,IAAIC,KAAJ;AACA,IAAMC,UAAU,GAAG,IAAIC,2BAAJ,EAAnB,C,CACA;;AACA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAMC,OAAO,GAAG,EAAhB;AACA;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD,EAAaC,KAAb,EAAuB;AAC3C,MAAMC,SAAS,GAAGF,UAAU,GAAG,KAA/B;AACA,MAAMG,SAAS,GAAG,CAACH,UAAU,GAAGE,SAAd,IAA2B,CAA7C;AACA,MAAME,aAAa,GAAGF,SAAS,GAAIA,SAAS,GAAG,EAAb,GAAmBD,KAArD;AACA,SAAOG,aAAa,GAAGD,SAAhB,GAA4BC,aAA5B,GAA4CD,SAAnD;AACH,CALD;;AAMA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAAA,MAClBb,IADkB,GAC2Da,KAD3D,CAClBb,IADkB;AAAA,MACZc,KADY,GAC2DD,KAD3D,CACZC,KADY;AAAA,MACLN,KADK,GAC2DK,KAD3D,CACLL,KADK;AAAA,MACEO,aADF,GAC2DF,KAD3D,CACEE,aADF;AAAA,MACiBC,WADjB,GAC2DH,KAD3D,CACiBG,WADjB;AAAA,MAC8BC,YAD9B,GAC2DJ,KAD3D,CAC8BI,YAD9B;AAAA,MAC4CV,UAD5C,GAC2DM,KAD3D,CAC4CN,UAD5C;AAE1B,MAAMW,WAAW,GAAGV,KAAK,KAAK,CAA9B,CAF0B,CAG1B;;AACA,MAAIH,OAAO,CAACc,MAAR,CAAe,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACZ,KAAL,KAAeA,KAAnB;AAAA,GAAnB,EAA6Ca,MAA7C,KAAwD,CAA5D,EAA+D;AAC3DhB,IAAAA,OAAO,CAACiB,IAAR,CAAa;AAAEd,MAAAA,KAAK,EAALA,KAAF;AAASe,MAAAA,SAAS,EAAEP,WAAW,CAAClB;AAAhC,KAAb;AACH;;AACD,MAAM0B,YAAY,GAAGlB,eAAe,CAACC,UAAD,EAAaC,KAAb,CAApC;AACA,MAAMiB,OAAO,GAAGzB,IAAI,CAACqB,MAArB;AACArB,EAAAA,IAAI,CAAC0B,OAAL,CAAa,UAACN,IAAD,EAAOO,KAAP,EAAiB;AAAA,QAClBC,QADkB,GACUR,IADV,CAClBQ,QADkB;AAAA,QACLC,UADK,4BACUT,IADV;;AAE1B,QAAMU,EAAE,GAAG,KAAKV,IAAI,CAACU,EAArB;AACA,QAAMC,GAAG,GAAG,KAAKX,IAAI,CAACW,GAAtB;AACA,QAAMC,QAAQ,GAAG,MAAMxB,KAAvB;AACA,QAAMyB,QAAQ,GAAG;AACbpC,MAAAA,CAAC,EAAEoB,YAAY,CAACpB,CAAb,GAAiBmC,QADP;AAEblC,MAAAA,CAAC,EAAEmB,YAAY,CAACnB,CAAb,GAAiBkC,QAFP;AAGbjC,MAAAA,CAAC,EAAEkB,YAAY,CAAClB,CAAb,GAAiBiC;AAHP,KAAjB;AAKA,QAAME,cAAc,GAAG;AACnBC,MAAAA,IAAI,EAAEF,QADa;AAEnBG,MAAAA,KAAK,EAAE;AAFY,KAAvB,CAV0B,CAc1B;AACA;AACA;;AACA,QAAMC,IAAI,GAAGpC,KAAK,CAACqC,KAAN,CAAYC,KAAZ,GAAoBX,QAApB,CAA6B,CAA7B,CAAb;AACAS,IAAAA,IAAI,CAAC,UAAD,CAAJ,GAAmBA,IAAI,CAAC,UAAD,CAAJ,CAAiBE,KAAjB,EAAnB;AACAF,IAAAA,IAAI,CAACG,KAAL,CAAWC,GAAX,CAAe,IAAIjC,KAAnB,EAA0B,IAAIA,KAA9B,EAAqC,IAAIA,KAAzC;AACA,QAAMkC,YAAY,GAAGxB,WAAW,GAC1BF,WAD0B,GAE1Ba,UAAU,CAACjC,QAAX,CAAoB;AAApB,MACIiC,UAAU,CAACjC,QADf,GAEI,+BAAgB;AACdY,MAAAA,KAAK,EAALA,KADc;AAEdD,MAAAA,UAAU,EAAVA,UAFc;AAGdQ,MAAAA,aAAa,EAAbA,aAHc;AAIdC,MAAAA,WAAW,EAAXA,WAJc;AAKdW,MAAAA,KAAK,EAALA,KALc;AAMdH,MAAAA,YAAY,EAAZA,YANc;AAOdC,MAAAA,OAAO,EAAPA;AAPc,KAAhB,CAJV;AAaAY,IAAAA,IAAI,CAACzC,QAAL,CAAc6C,GAAd,CAAkBC,YAAY,CAAC7C,CAA/B,EAAkC6C,YAAY,CAAC5C,CAA/C,EAAkD4C,YAAY,CAAC3C,CAA/D;AACAsC,IAAAA,IAAI,CAACM,UAAL,GAAkB,IAAlB;AACAN,IAAAA,IAAI,CAACO,aAAL,GAAqB,IAArB,CAnC0B,CAoC1B;;AACAP,IAAAA,IAAI,CAACQ,IAAL,GAAYf,EAAZ;AACAO,IAAAA,IAAI,CAACS,QAAL;AACIC,MAAAA,IAAI,EAAE,MADV;AAEInD,MAAAA,QAAQ,EAAE8C,YAFd;AAGIlC,MAAAA,KAAK,EAALA;AAHJ,OAIO0B,cAJP,GAKOL,UALP;;AAOA,QAAI,CAACX,WAAL,EAAkB;AACd,UAAM8B,iBAAiB,GAAGxC,KAAK,KAAK,CAAV,GAAcO,aAAd,GAA8BC,WAAxD;AACA,UAAMiC,cAAc,GAAG;AACnBC,QAAAA,UAAU,EAAE,GADO;AAEnBC,QAAAA,QAAQ,EAAE,GAFS;AAGnBpC,QAAAA,aAAa,EAAEiC,iBAHI;AAInBhC,QAAAA,WAAW,EAAE0B,YAJM;AAKnBN,QAAAA,KAAK,EAAE;AALY,OAAvB,CAFc,CASd;;AACA,UAAMgB,IAAI,GAAG,gCAAmBH,cAAnB,CAAb,CAVc,CAWd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMI,QAAQ,aAAMtB,GAAN,cAAaD,EAAb,CAAd;AACAsB,MAAAA,IAAI,CAACP,IAAL,GAAYQ,QAAZ;AACAD,MAAAA,IAAI,CAACT,UAAL,GAAkB,IAAlB;AACAS,MAAAA,IAAI,CAACR,aAAL,GAAqB,IAArB;AACAxC,MAAAA,OAAO,CAACkB,IAAR,CAAa+B,QAAb;AACAD,MAAAA,IAAI,CAACN,QAAL;AACIC,QAAAA,IAAI,EAAE,MADV;AAEIO,QAAAA,KAAK,EAAED,QAFX;AAGIE,QAAAA,IAAI,EAAExB,GAHV;AAIIyB,QAAAA,EAAE,EAAE1B;AAJR,SAKOmB,cALP;AAOAnC,MAAAA,KAAK,CAAC2C,GAAN,CAAUL,IAAV;AACH;;AACDhD,IAAAA,OAAO,CAACkB,IAAR,CAAaQ,EAAb;AACAhB,IAAAA,KAAK,CAAC2C,GAAN,CAAUpB,IAAV;;AACA,QAAIT,QAAQ,IAAIA,QAAQ,CAACP,MAAzB,EAAiC;AAC7B,UAAMqC,kBAAkB,qBAAQhB,YAAR,CAAxB;;AACA,UAAIxB,WAAJ,EAAiB;AACbwC,QAAAA,kBAAkB,CAAC5D,CAAnB,GAAuB4D,kBAAkB,CAAC5D,CAAnB,GAAuB0B,YAA9C;AACH;;AACDZ,MAAAA,UAAU,CAAC;AACPZ,QAAAA,IAAI,EAAE4B,QADC;AAEPd,QAAAA,KAAK,EAALA,KAFO;AAGPN,QAAAA,KAAK,EAAEA,KAAK,GAAG,CAHR;AAIPD,QAAAA,UAAU,EAAVA,UAJO;AAKPQ,QAAAA,aAAa,EAAEC,WALR;AAMPA,QAAAA,WAAW,EAAE0C,kBANN;AAOPzC,QAAAA,YAAY,EAAZA;AAPO,OAAD,CAAV;AASH;AACJ,GAhGD;AAiGH,CA1GD;AA2GA;;;;;AAGA,IAAM0C,cAAc,GAAG,SAAjBA,cAAiB,GAAuC;AAAA,MAAtC9C,KAAsC,uEAA9BlB,eAA8B;AAAA,MAAbiE,QAAa;AAAA,MAClDhE,QADkD,GACnBiB,KADmB,CAClDjB,QADkD;AAAA,MACxCI,IADwC,GACnBa,KADmB,CACxCb,IADwC;AAAA,qBACnBa,KADmB,CAClCgD,KADkC;AAAA,MAClCA,KADkC,6BAC1B,EAD0B;AAAA,MAElDhE,CAFkD,GAEtCD,QAFsC,CAElDC,CAFkD;AAAA,MAE/CC,CAF+C,GAEtCF,QAFsC,CAE/CE,CAF+C;AAAA,MAE5CC,CAF4C,GAEtCH,QAFsC,CAE5CG,CAF4C;AAG1D,MAAMe,KAAK,GAAG,IAAIgD,KAAK,CAACC,KAAV,EAAd,CAH0D,CAI1D;;AACA,MAAMxD,UAAU,GAAG,EAAnB;AACA,MAAMyD,aAAa,GAAG,CAAtB;AACA,MAAMC,cAAc,GAAGD,aAAa,GAAG,CAAvC;AACA,MAAME,WAAW,GAAGL,KAAK,CAACxC,MAA1B;AACA,MAAMJ,YAAY,GAAG;AAAEpB,IAAAA,CAAC,EAAEmE,aAAL;AAAoBlE,IAAAA,CAAC,EAAEmE,cAAvB;AAAuClE,IAAAA,CAAC,EAAEiE;AAA1C,GAArB,CAT0D,CAU1D;AACA;;AACA,MAAIG,SAAJ;AACA,MAAMpD,aAAa,GAAG;AAAElB,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE,CAAX;AAAcC,IAAAA,CAAC,EAAE;AAAjB,GAAtB;AACA,MAAMiB,WAAW,GAAG;AAAEnB,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAES,UAAX;AAAuBR,IAAAA,CAAC,EAAE;AAA1B,GAApB;AACAG,EAAAA,UAAU,CAACkE,IAAX,CAAgBC,OAAO,CAAC,0BAAD,CAAvB,EAAqD,UAACC,IAAD,EAAU;AAC3DH,IAAAA,SAAS,GAAGG,IAAI,CAAChC,KAAL,CAAWC,KAAX,EAAZ;AACA4B,IAAAA,SAAS,CAACvE,QAAV,CAAmB6C,GAAnB,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;AACA0B,IAAAA,SAAS,CAAC3B,KAAV,CAAgBC,GAAhB,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACA3B,IAAAA,KAAK,CAAC2C,GAAN,CAAUU,SAAV;AACH,GALD,EAf0D,CAqB1D;;AACA,MAAMI,KAAK,GAAG,gCAAmB;AAC7BrB,IAAAA,UAAU,EAAE,GADiB;AAE7BC,IAAAA,QAAQ,EAAE,GAFmB;AAG7BpC,IAAAA,aAAa,EAAbA,aAH6B;AAI7BC,IAAAA,WAAW,EAAXA,WAJ6B;AAK7BoB,IAAAA,KAAK,EAAE;AALsB,GAAnB,CAAd;AAOAmC,EAAAA,KAAK,CAAC5B,UAAN,GAAmB,IAAnB;AACA4B,EAAAA,KAAK,CAAC3B,aAAN,GAAsB,IAAtB;AACA2B,EAAAA,KAAK,CAAC1B,IAAN,GAAa,OAAb;AACA0B,EAAAA,KAAK,CAACzB,QAAN,GAAiB;AACbC,IAAAA,IAAI,EAAE,MADO;AAEbhC,IAAAA,aAAa,EAAbA,aAFa;AAGbC,IAAAA,WAAW,EAAXA,WAHa;AAIbsC,IAAAA,KAAK,EAAE,IAJM;AAKbC,IAAAA,IAAI,EAAE,GALO;AAMbC,IAAAA,EAAE,EAAE;AANS,GAAjB,CAhC0D,CAwC1D;AACA;AACA;AACA;AACA;;AACA,MAAMgB,QAAQ,GAAGR,aAAa,GAAGE,WAAhB,GAA8B,GAA/C;AACA,0BAAW;AAAEO,IAAAA,IAAI,EAAEZ,KAAR;AAAe1B,IAAAA,IAAI,EAAEqC,QAArB;AAA+BpC,IAAAA,KAAK,EAAE;AAAtC,GAAX,EAA6D,UAAAsC,MAAM,EAAI;AACnEA,IAAAA,MAAM,CAAC9E,QAAP,CAAgB6C,GAAhB,CAAoB,CAACwB,cAArB,EAAqCO,QAAQ,GAAG,CAAhD,EAAmDP,cAAnD;AACAnD,IAAAA,KAAK,CAAC2C,GAAN,CAAUiB,MAAV;AACH,GAHD,EA9C0D,CAkD1D;AACA;;AACA5D,EAAAA,KAAK,CAAC2C,GAAN,CAAUc,KAAV;AACAnE,EAAAA,OAAO,GAAG,CAAC,OAAD,CAAV;AACAF,EAAAA,UAAU,CAACkE,IAAX,CAAgBC,OAAO,CAAC,2BAAD,CAAvB,EAAsD,UAACC,IAAD,EAAU;AAC5DrE,IAAAA,KAAK,GAAGqE,IAAR;AACA1D,IAAAA,UAAU,CAAC;AACPZ,MAAAA,IAAI,EAAJA,IADO;AAEPc,MAAAA,KAAK,EAALA,KAFO;AAGPN,MAAAA,KAAK,EAAE,CAHA;AAIPD,MAAAA,UAAU,EAAVA,UAJO;AAKPQ,MAAAA,aAAa,EAAbA,aALO;AAMPC,MAAAA,WAAW,EAAXA,WANO;AAOPC,MAAAA,YAAY,EAAZA;AAPO,KAAD,CAAV;AASAH,IAAAA,KAAK,CAAClB,QAAN,CAAe6C,GAAf,CAAmB5C,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB;AACAe,IAAAA,KAAK,CAACgC,QAAN,GAAiB;AACb6B,MAAAA,GAAG,EAAEvE,OADQ;AAEbC,MAAAA,OAAO,EAAPA;AAFa,KAAjB;AAIAuD,IAAAA,QAAQ,CAAC9C,KAAD,CAAR;AACH,GAjBD;AAkBH,CAxED;;eAyEe6C,c","sourcesContent":["import * as THREE from 'three';\nimport GLTFLoader from 'three-gltf-loader';\nimport { createCylinderMesh, createFont } from '../utils/create';\nimport { getNodePosition } from '../utils/position';\nconst initialDataTree = {\n    position: { x: 0, y: 0, z: 0 },\n    data: [],\n};\nlet leafs;\nconst leafLoader = new GLTFLoader();\n// 轮播对象的id\nlet dataIds = [];\nconst gridBox = [];\n/** 获取树枝长度 */\nconst getBranchLength = (treeHeight, level) => {\n    const maxLength = treeHeight * 0.618;\n    const minLength = (treeHeight - maxLength) / 2;\n    const currentLength = maxLength - (maxLength / 10) * level;\n    return currentLength > minLength ? currentLength : minLength;\n};\nconst renderTree = (props) => {\n    const { data, group, level, startPosition, endPosition, baseNodeSize, treeHeight } = props;\n    const isFirstNode = level === 1;\n    // 保存网格盒子的数据\n    if (gridBox.filter(item => item.level === level).length === 0) {\n        gridBox.push({ level, positionY: endPosition.y });\n    }\n    const branchLength = getBranchLength(treeHeight, level);\n    const nodeNum = data.length;\n    data.forEach((item, index) => {\n        const { children, ...restParams } = item;\n        const id = '' + item.id;\n        const pid = '' + item.pid;\n        const nodeRate = 0.5 / level;\n        const nodeSize = {\n            x: baseNodeSize.x * nodeRate,\n            y: baseNodeSize.y * nodeRate,\n            z: baseNodeSize.z * nodeRate,\n        };\n        const nodeCubeConfig = {\n            size: nodeSize,\n            color: 0x229a41,\n        };\n        // 方块节点\n        // const node = createCube(nodeCubeConfig);\n        // 树叶团节点\n        const node = leafs.scene.clone().children[2];\n        node['material'] = node['material'].clone();\n        node.scale.set(1 / level, 1 / level, 1 / level);\n        const nodePosition = isFirstNode\n            ? endPosition\n            : restParams.position // 如果是自定义位置 直接使用\n                ? restParams.position\n                : getNodePosition({\n                    level,\n                    treeHeight,\n                    startPosition,\n                    endPosition,\n                    index,\n                    branchLength,\n                    nodeNum,\n                });\n        node.position.set(nodePosition.x, nodePosition.y, nodePosition.z);\n        node.castShadow = true;\n        node.receiveShadow = true;\n        // 设置节点携带数据\n        node.name = id;\n        node.userData = {\n            type: 'node',\n            position: nodePosition,\n            level,\n            ...nodeCubeConfig,\n            ...restParams,\n        };\n        if (!isFirstNode) {\n            const linkStartPosition = level === 2 ? startPosition : endPosition;\n            const linkMeshConfig = {\n                startWidth: 0.1,\n                endWidth: 0.2,\n                startPosition: linkStartPosition,\n                endPosition: nodePosition,\n                color: 0x7d653a,\n            };\n            // 圆柱连线\n            const link = createCylinderMesh(linkMeshConfig);\n            // 弯曲管道连线\n            // const tubeRadius = 0.4 / level;\n            // const link = createTube({\n            //   startPosition: linkStartPosition,\n            //   endPosition: nodePosition,\n            //   radius: tubeRadius < 0.05 ? 0.05 : tubeRadius,\n            //   color: 0x7d653a,\n            // });\n            // 设置联线携带数据\n            const linkName = `${pid}_${id}`;\n            link.name = linkName;\n            link.castShadow = true;\n            link.receiveShadow = true;\n            dataIds.push(linkName);\n            link.userData = {\n                type: 'link',\n                label: linkName,\n                from: pid,\n                to: id,\n                ...linkMeshConfig,\n            };\n            group.add(link);\n        }\n        dataIds.push(id);\n        group.add(node);\n        if (children && children.length) {\n            const currentEndPosition = { ...nodePosition };\n            if (isFirstNode) {\n                currentEndPosition.y = currentEndPosition.y + branchLength;\n            }\n            renderTree({\n                data: children,\n                group,\n                level: level + 1,\n                treeHeight,\n                startPosition: endPosition,\n                endPosition: currentEndPosition,\n                baseNodeSize,\n            });\n        }\n    });\n};\n/**\n * 创建数据树\n */\nconst createDataTree = (props = initialDataTree, callBack) => {\n    const { position, data, title = '' } = props;\n    const { x, y, z } = position;\n    const group = new THREE.Group();\n    // 树干高度\n    const treeHeight = 10;\n    const baseNodeWidth = 4;\n    const baseNodeHeight = baseNodeWidth / 2;\n    const titleLength = title.length;\n    const baseNodeSize = { x: baseNodeWidth, y: baseNodeHeight, z: baseNodeWidth };\n    // 树根节点\n    // const startNode = createCube({ size: baseNodeSize, color: 0x4f4118 });\n    let startNode;\n    const startPosition = { x: 0, y: 0, z: 0 };\n    const endPosition = { x: 0, y: treeHeight, z: 0 };\n    leafLoader.load(require('../assets/tree/root.gltf'), (gltf) => {\n        startNode = gltf.scene.clone();\n        startNode.position.set(0, 0, 0);\n        startNode.scale.set(2, 2, 2);\n        group.add(startNode);\n    });\n    // 树干\n    const trunk = createCylinderMesh({\n        startWidth: 0.4,\n        endWidth: 0.8,\n        startPosition,\n        endPosition,\n        color: 0x7d653a,\n    });\n    trunk.castShadow = true;\n    trunk.receiveShadow = true;\n    trunk.name = 'trunk';\n    trunk.userData = {\n        type: 'link',\n        startPosition,\n        endPosition,\n        label: '树干',\n        from: '根',\n        to: '初始节点',\n    };\n    // const line = createLink({\n    //   startPosition: { x: 0, y: 0, z: 0 },\n    //   endPosition: { x: 0, y: 10, z: 0 },\n    // });\n    // 创建字体\n    const fontSize = baseNodeWidth / titleLength / 1.5;\n    createFont({ text: title, size: fontSize, color: 0xffffff }, result => {\n        result.position.set(-baseNodeHeight, fontSize / 2, baseNodeHeight);\n        group.add(result);\n    });\n    // group.add(line);\n    // group.add(cylinder);\n    group.add(trunk);\n    dataIds = ['trunk'];\n    leafLoader.load(require('../assets/tree/leafs.gltf'), (gltf) => {\n        leafs = gltf;\n        renderTree({\n            data,\n            group,\n            level: 1,\n            treeHeight,\n            startPosition,\n            endPosition,\n            baseNodeSize,\n        });\n        group.position.set(x, y, z);\n        group.userData = {\n            ids: dataIds,\n            gridBox,\n        };\n        callBack(group);\n    });\n};\nexport default createDataTree;\n"],"file":"datatree.js"}